/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ExtrasThreeT.glb --transform -d 
Files: ExtrasThreeT.glb [12.56MB] > C:\Users\andre\My Stuff\Blender Projects\Minecraft Portfolio\Objects\For Use\ExtrasThreeT-transformed.glb [12.53MB] (0%)
*/

import React, { useRef } from "react";

import { useGLTFWithKTX2 } from "../../utils/useGLTFWithKTX2";
import { convertMaterialsToMeshBasicMaterial } from "../../utils/convertMaterial";

import { useAudioStore } from "../../stores/audioStore";

const doorOpeningSound = new Audio("/music/DoorOpening.ogg");
const doorClosingSound = new Audio("/music/DoorClosing.ogg");
doorOpeningSound.volume = 0.4;
doorClosingSound.volume = 0.4;

export default function Model({ progress = 0, ...props }) {
  const { nodes, materials } = useGLTFWithKTX2("/models/ExtrasThreeT-v1.glb");
  const doorRef = useRef();
  const doorState = useRef("closed");
  const { isAudioEnabled } = useAudioStore();

  convertMaterialsToMeshBasicMaterial(materials);

  const doorAnimationConfig = {
    pivotPointOne: 0.17,
    pivotPointTwo: 0.8,
    openAngle: Math.PI / 2,
    closeAngle: 0,
  };

  if (
    progress >= doorAnimationConfig.pivotPointOne &&
    progress < doorAnimationConfig.pivotPointTwo &&
    doorState.current === "closed"
  ) {
    doorRef.current.rotation.z = doorAnimationConfig.openAngle;
    doorState.current = "open";
    if (isAudioEnabled) {
      doorOpeningSound.play();
    }
  }

  if (
    progress < doorAnimationConfig.pivotPointOne &&
    doorState.current === "open"
  ) {
    doorRef.current.rotation.z = doorAnimationConfig.closeAngle;
    doorState.current = "closed";
    if (isAudioEnabled) {
      doorClosingSound.play();
    }
  }

  // second pivot
  if (
    progress >= doorAnimationConfig.pivotPointTwo &&
    doorState.current === "open"
  ) {
    doorRef.current.rotation.z = doorAnimationConfig.closeAngle;
    doorState.current = "closed";
    if (isAudioEnabled) {
      doorClosingSound.play();
    }
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.extras_three_Baked.geometry}
        material={materials["MergedBake_Baked.006"]}
        position={[0.597, 68.353, 2.812]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        ref={doorRef}
        geometry={nodes.door.geometry}
        material={materials["MergedBake_Baked.006"]}
        position={[-2.935, 67.848, 0.906]}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  );
}
